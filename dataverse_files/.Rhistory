jags_model = jags(data=ds, param=params, n.thin=1, n.chains=nchains, n.iter=10000, n.burnin=3000, model.file=model)
jagsresults(x=jags_model, params=c('combo'))[, '2.5%']
jagsresults(x=jags_model, params=c('combo'))[, '97.5%']
p_mcmc = as.mcmc(jags_model)
p = data.frame(p_mcmc[[1]])
pmu1 = p$mu.1.
pmu2 = p$mu.2.
pbt1 = p$beta1
combo = pmu1 * pmu2 *pbt1
quantile(combo, 0.025)
quantile(combo, 0.975)
jagsresults(x=jags_model, params=c('combo'))[, '2.5%']
jagsresults(x=jags_model, params=c('combo'))[, '97.5%']
library(rjags)
library(R2jags)
library(devtools)
library(jagstools)
library(gtools)
library(bayesboot)
# Simulation to convince myself we can get post-hoc CIs for LE
# 1. Simulate data for a poisson glm
N = 100
x = rnorm(N, mean=10, sd=1)
mu = exp(1 + 0.2*x)
y = rpois(N, lambda=mu)
plot(x,y)
# 2. MCMC model
ds = list(x=x, y=y, N=N)
df = data.frame(x=x,y=y)
head(ds)
model = function() {
for(i in 1:N) {
y[i] ~ dpois(mu[i])
log(mu[i]) <- beta0 + beta1*x[i]
}
combo <- (mu[1] * mu[2]) / beta1
beta0 ~ dnorm(0, 0.001)
beta1 ~ dnorm(0, 0.001)
}
params = c('mu', 'combo', 'beta0', 'beta1')
nchains = 2
jags_model = jags(data=ds, param=params, n.thin=1, n.chains=nchains, n.iter=10000, n.burnin=3000, model.file=model)
library(rjags)
library(R2jags)
library(devtools)
library(jagstools)
library(gtools)
library(bayesboot)
# Simulation to convince myself we can get post-hoc CIs for LE
# 1. Simulate data for a poisson glm
N = 100
x = rnorm(N, mean=10, sd=1)
mu = exp(1 + 0.2*x)
y = rpois(N, lambda=mu)
plot(x,y)
# 2. MCMC model
ds = list(x=x, y=y, N=N)
df = data.frame(x=x,y=y)
head(ds)
model = function() {
for(i in 1:N) {
y[i] ~ dpois(mu[i])
log(mu[i]) <- beta0 + beta1*x[i]
}
combo <- (mu[1] * mu[2]) + beta1
beta0 ~ dnorm(0, 0.001)
beta1 ~ dnorm(0, 0.001)
}
params = c('mu', 'combo', 'beta0', 'beta1')
nchains = 2
jags_model = jags(data=ds, param=params, n.thin=1, n.chains=nchains, n.iter=10000, n.burnin=3000, model.file=model)
jagsresults(x=jags_model, params=c('combo'))[, '2.5%']
jagsresults(x=jags_model, params=c('combo'))[, '97.5%']
p_mcmc = as.mcmc(jags_model)
p = data.frame(p_mcmc[[1]])
pmu1 = p$mu.1.
pmu2 = p$mu.2.
pbt1 = p$beta1
combo = pmu1 * pmu2 *pbt1
combo = pmu1 * pmu2 + pbt1
quantile(combo, 0.025)
quantile(combo, 0.975)
jagsresults(x=jags_model, params=c('combo'))[, '2.5%']
jagsresults(x=jags_model, params=c('combo'))[, '97.5%']
library(rjags)
library(R2jags)
library(devtools)
library(jagstools)
library(gtools)
library(bayesboot)
# Simulation to convince myself we can get post-hoc CIs for LE
# 1. Simulate data for a poisson glm
N = 100
x = rnorm(N, mean=10, sd=1)
mu = exp(1 + 0.2*x)
y = rpois(N, lambda=mu)
plot(x,y)
# 2. MCMC model
ds = list(x=x, y=y, N=N)
df = data.frame(x=x,y=y)
head(ds)
model = function() {
for(i in 1:N) {
y[i] ~ dpois(mu[i])
log(mu[i]) <- beta0 + beta1*x[i]
}
combo <- (mu[1] * mu[2]) + beta1*beta2
beta0 ~ dnorm(0, 0.001)
beta1 ~ dnorm(0, 0.001)
}
params = c('mu', 'combo', 'beta0', 'beta1')
nchains = 2
jags_model = jags(data=ds, param=params, n.thin=1, n.chains=nchains, n.iter=10000, n.burnin=3000, model.file=model)
library(rjags)
library(R2jags)
library(devtools)
library(jagstools)
library(gtools)
library(bayesboot)
# Simulation to convince myself we can get post-hoc CIs for LE
# 1. Simulate data for a poisson glm
N = 100
x = rnorm(N, mean=10, sd=1)
mu = exp(1 + 0.2*x)
y = rpois(N, lambda=mu)
plot(x,y)
# 2. MCMC model
ds = list(x=x, y=y, N=N)
df = data.frame(x=x,y=y)
head(ds)
model = function() {
for(i in 1:N) {
y[i] ~ dpois(mu[i])
log(mu[i]) <- beta0 + beta1*x[i]
}
combo <- (mu[1] * mu[2]) + beta1*beta0
beta0 ~ dnorm(0, 0.001)
beta1 ~ dnorm(0, 0.001)
}
params = c('mu', 'combo', 'beta0', 'beta1')
nchains = 2
jags_model = jags(data=ds, param=params, n.thin=1, n.chains=nchains, n.iter=10000, n.burnin=3000, model.file=model)
jagsresults(x=jags_model, params=c('combo'))[, '2.5%']
jagsresults(x=jags_model, params=c('combo'))[, '97.5%']
p_mcmc = as.mcmc(jags_model)
p = data.frame(p_mcmc[[1]])
pmu1 = p$mu.1.
pmu2 = p$mu.2.
pbt1 = p$beta1
pbt2 = p$beta2
combo = pmu1 * pmu2 + pbt1
quantile(combo, 0.025)
quantile(combo, 0.975)
combo = pmu1 * pmu2 + pbt1*pbt2
print(jagsresults(x=jags_model, params=c('combo'))[, '2.5%'],
jagsresults(x=jags_model, params=c('combo'))[, '97.5%'])
print(c(jagsresults(x=jags_model, params=c('combo'))[, '2.5%'],
jagsresults(x=jags_model, params=c('combo'))[, '97.5%']))
print(c(quantile(combo, 0.025),
quantile(combo, 0.975)))
print(c(quantile(combo, 0.025),
quantile(combo, 0.975)))
combo = pmu1 * pmu2 + pbt1*pbt2
combo
p_mcmc = as.mcmc(jags_model)
p = data.frame(p_mcmc[[1]])
pmu1 = p$mu.1.
pmu2 = p$mu.2.
pbt1 = p$beta1
pbt2 = p$beta2
combo = pmu1 * pmu2 + pbt1*pbt2
combo
pmu2
pmu1 = p$mu.1.
pmu2 = p$mu.2.
pbt1 = p$beta1
pbt0 = p$beta0
combo = pmu1 * pmu2 + pbt1*pbt2
print(c(jagsresults(x=jags_model, params=c('combo'))[, '2.5%'],
jagsresults(x=jags_model, params=c('combo'))[, '97.5%']))
print(c(quantile(combo, 0.025),
quantile(combo, 0.975)))
combo = pmu1 * pmu2 + pbt1*pbt0
print(c(jagsresults(x=jags_model, params=c('combo'))[, '2.5%'],
jagsresults(x=jags_model, params=c('combo'))[, '97.5%']))
print(c(quantile(combo, 0.025),
quantile(combo, 0.975)))
library(rjags)
library(R2jags)
library(devtools)
library(jagstools)
library(gtools)
library(bayesboot)
# Simulation to convince myself we can get post-hoc CIs for LE
# 1. Simulate data for a poisson glm
N = 100
x = rnorm(N, mean=10, sd=1)
mu = exp(1 + 0.2*x)
y = rpois(N, lambda=mu)
plot(x,y)
# 2. MCMC model
ds = list(x=x, y=y, N=N)
df = data.frame(x=x,y=y)
head(ds)
model = function() {
for(i in 1:N) {
y[i] ~ dpois(mu[i])
log(mu[i]) <- beta0 + beta1*x[i]
}
combo <- exp(mu[1]*mu[2])*mu[3]
beta0 ~ dnorm(0, 0.001)
beta1 ~ dnorm(0, 0.001)
}
params = c('mu', 'combo', 'beta0', 'beta1')
nchains = 2
jags_model = jags(data=ds, param=params, n.thin=1, n.chains=nchains, n.iter=10000, n.burnin=3000, model.file=model)
library(rjags)
library(R2jags)
library(devtools)
library(jagstools)
library(gtools)
library(bayesboot)
# Simulation to convince myself we can get post-hoc CIs for LE
# 1. Simulate data for a poisson glm
N = 100
x = rnorm(N, mean=10, sd=1)
mu = exp(1 + 0.2*x)
y = rpois(N, lambda=mu)
plot(x,y)
# 2. MCMC model
ds = list(x=x, y=y, N=N)
df = data.frame(x=x,y=y)
head(ds)
model = function() {
for(i in 1:N) {
y[i] ~ dpois(mu[i])
log(mu[i]) <- beta0 + beta1*x[i]
}
combo <- log(mu[1]*mu[2])*mu[3]
beta0 ~ dnorm(0, 0.001)
beta1 ~ dnorm(0, 0.001)
}
params = c('mu', 'combo', 'beta0', 'beta1')
nchains = 2
jags_model = jags(data=ds, param=params, n.thin=1, n.chains=nchains, n.iter=10000, n.burnin=3000, model.file=model)
#manual from posterior samples
p_mcmc = as.mcmc(jags_model)
p = data.frame(p_mcmc[[1]])
pmu1 = p$mu.1.
pmu2 = p$mu.2.
pbt1 = p$beta1
pbt0 = p$beta0
combo = pmu1 * pmu2 + pbt1*pbt0
print(c(jagsresults(x=jags_model, params=c('combo'))[, '2.5%'],
jagsresults(x=jags_model, params=c('combo'))[, '97.5%']))
pmu1 = p$mu.1.
pmu2 = p$mu.2.
pmu3 = p$mu.3.
pbt1 = p$beta1
pbt0 = p$beta0
combo = log(pmu1*pmu2)*pmu3
print(c(jagsresults(x=jags_model, params=c('combo'))[, '2.5%'],
jagsresults(x=jags_model, params=c('combo'))[, '97.5%']))
print(c(quantile(combo, 0.025),
quantile(combo, 0.975)))
library(rjags)
library(R2jags)
library(devtools)
library(jagstools)
library(gtools)
library(bayesboot)
# Simulation to convince myself we can get post-hoc CIs for LE
# 1. Simulate data for a poisson glm
N = 100
x = rnorm(N, mean=10, sd=1)
mu = exp(1 + 0.2*x)
y = rpois(N, lambda=mu)
plot(x,y)
# 2. MCMC model
ds = list(x=x, y=y, N=N)
df = data.frame(x=x,y=y)
head(ds)
model = function() {
for(i in 1:N) {
y[i] ~ dpois(mu[i])
log(mu[i]) <- beta0 + beta1*x[i]
}
combo <- log(mu[1]*mu[2])*mu[3] + mu[4]
beta0 ~ dnorm(0, 0.001)
beta1 ~ dnorm(0, 0.001)
}
params = c('mu', 'combo', 'beta0', 'beta1')
nchains = 2
jags_model = jags(data=ds, param=params, n.thin=1, n.chains=nchains, n.iter=10000, n.burnin=3000, model.file=model)
pmu4 = p$mu.4.
combo = log(pmu1*pmu2)*pmu3 + pmu4
print(c(jagsresults(x=jags_model, params=c('combo'))[, '2.5%'],
jagsresults(x=jags_model, params=c('combo'))[, '97.5%']))
print(c(quantile(combo, 0.025),
quantile(combo, 0.975)))
library(rjags)
library(R2jags)
library(devtools)
library(jagstools)
library(gtools)
library(bayesboot)
# Simulation to convince myself we can get post-hoc CIs for LE
# 1. Simulate data for a poisson glm
N = 100
x = rnorm(N, mean=10, sd=1)
mu = exp(1 + 0.2*x)
y = rpois(N, lambda=mu)
plot(x,y)
# 2. MCMC model
ds = list(x=x, y=y, N=N)
df = data.frame(x=x,y=y)
head(ds)
model = function() {
for(i in 1:N) {
y[i] ~ dpois(mu[i])
log(mu[i]) <- beta0 + beta1*x[i]
}
combo <- log(mu[1]*mu[2])*mu[3] + mu[4]
beta0 ~ dnorm(0, 0.001)
beta1 ~ dnorm(0, 0.001)
}
params = c('mu', 'combo', 'beta0', 'beta1')
nchains = 2
jags_model = jags(data=ds, param=params, n.thin=1, n.chains=nchains, n.iter=10000, n.burnin=3000, model.file=model)
p_mcmc = as.mcmc(jags_model)
p = data.frame(p_mcmc[[1]])
pmu1 = p$mu.1.
pmu2 = p$mu.2.
pmu3 = p$mu.3.
pmu4 = p$mu.4.
combo = log(pmu1*pmu2)*pmu3 + pmu4
print(c(jagsresults(x=jags_model, params=c('combo'))[, '2.5%'],
jagsresults(x=jags_model, params=c('combo'))[, '97.5%']))
print(c(quantile(combo, 0.025),
quantile(combo, 0.975)))
library(rjags)
library(R2jags)
library(devtools)
library(jagstools)
library(gtools)
library(bayesboot)
# Simulation to convince myself we can get post-hoc CIs for LE
# 1. Simulate data for a poisson glm
N = 100
x = rnorm(N, mean=10, sd=1)
mu = exp(1 + 0.2*x)
y = rpois(N, lambda=mu)
plot(x,y)
# 2. MCMC model
ds = list(x=x, y=y, N=N)
df = data.frame(x=x,y=y)
head(ds)
model = function() {
for(i in 1:N) {
y[i] ~ dpois(mu[i])
log(mu[i]) <- beta0 + beta1*x[i]
}
combo <- sum(mu[1:10])
beta0 ~ dnorm(0, 0.001)
beta1 ~ dnorm(0, 0.001)
}
params = c('mu', 'combo', 'beta0', 'beta1')
nchains = 2
jags_model = jags(data=ds, param=params, n.thin=1, n.chains=nchains, n.iter=10000, n.burnin=3000, model.file=model)
p$mu.1.
sum(p$mu.1., p$mu.2., p$mu.3., p$mu.4. p$mu.5.)
sum(p$mu.1., p$mu.2., p$mu.3., p$mu.4., p$mu.5.)
combo = sum(p$mu.1., p$mu.2., p$mu.3., p$mu.4., p$mu.5.)
print(c(jagsresults(x=jags_model, params=c('combo'))[, '2.5%'],
jagsresults(x=jags_model, params=c('combo'))[, '97.5%']))
print(c(quantile(combo, 0.025),
quantile(combo, 0.975)))
combo = sum(p$mu.1., p$mu.2., p$mu.3., p$mu.4., p$mu.5.)
print(c(jagsresults(x=jags_model, params=c('combo'))[, '2.5%'],
jagsresults(x=jags_model, params=c('combo'))[, '97.5%']))
print(c(quantile(combo, 0.025),
quantile(combo, 0.975)))
combo
combo = p$mu.1. + p$mu.2. + p$mu.3. + p$mu.4. +p$mu.5.
combo
print(c(jagsresults(x=jags_model, params=c('combo'))[, '2.5%'],
jagsresults(x=jags_model, params=c('combo'))[, '97.5%']))
print(c(quantile(combo, 0.025),
quantile(combo, 0.975)))
library(rjags)
library(R2jags)
library(devtools)
library(jagstools)
library(gtools)
library(bayesboot)
# Simulation to convince myself we can get post-hoc CIs for LE
# 1. Simulate data for a poisson glm
N = 100
x = rnorm(N, mean=10, sd=1)
mu = exp(1 + 0.2*x)
y = rpois(N, lambda=mu)
plot(x,y)
# 2. MCMC model
ds = list(x=x, y=y, N=N)
df = data.frame(x=x,y=y)
head(ds)
model = function() {
for(i in 1:N) {
y[i] ~ dpois(mu[i])
log(mu[i]) <- beta0 + beta1*x[i]
}
combo <- sum(mu[1:5])
beta0 ~ dnorm(0, 0.001)
beta1 ~ dnorm(0, 0.001)
}
params = c('mu', 'combo', 'beta0', 'beta1')
nchains = 2
jags_model = jags(data=ds, param=params, n.thin=1, n.chains=nchains, n.iter=10000, n.burnin=3000, model.file=model)
p_mcmc = as.mcmc(jags_model)
p = data.frame(p_mcmc[[1]])
combo = p$mu.1. + p$mu.2. + p$mu.3. + p$mu.4. +p$mu.5.
print(c(jagsresults(x=jags_model, params=c('combo'))[, '2.5%'],
jagsresults(x=jags_model, params=c('combo'))[, '97.5%']))
print(c(quantile(combo, 0.025),
quantile(combo, 0.975)))
library(rjags)
library(R2jags)
library(devtools)
library(jagstools)
library(gtools)
library(bayesboot)
# Simulation to convince myself we can get post-hoc CIs for LE
# 1. Simulate data for a poisson glm
N = 100
x = rnorm(N, mean=10, sd=1)
mu = exp(1 + 0.2*x)
y = rpois(N, lambda=mu)
plot(x,y)
# 2. MCMC model
ds = list(x=x, y=y, N=N)
df = data.frame(x=x,y=y)
head(ds)
model = function() {
for(i in 1:N) {
y[i] ~ dpois(mu[i])
log(mu[i]) <- beta0 + beta1*x[i]
}
combo <- sum(mu[1:5]) / sum(mu[6:7])
beta0 ~ dnorm(0, 0.001)
beta1 ~ dnorm(0, 0.001)
}
params = c('mu', 'combo', 'beta0', 'beta1')
nchains = 2
jags_model = jags(data=ds, param=params, n.thin=1, n.chains=nchains, n.iter=10000, n.burnin=3000, model.file=model)
p_mcmc = as.mcmc(jags_model)
p = data.frame(p_mcmc[[1]])
combo = p$mu.1. + p$mu.2. + p$mu.3. + p$mu.4. +p$mu.5.
combo = (p$mu.1. + p$mu.2. + p$mu.3. + p$mu.4. +p$mu.5. ) / (p$mu.6. + p$mu.7.)
combo
print(c(jagsresults(x=jags_model, params=c('combo'))[, '2.5%'],
jagsresults(x=jags_model, params=c('combo'))[, '97.5%']))
print(c(quantile(combo, 0.025),
quantile(combo, 0.975)))
2500 - 172.00
library(rjags)
library(R2jags)
library(devtools)
library(jagstools)
library(gtools)
library(bayesboot)
# Simulation to convince myself we can get post-hoc CIs for LE
# 1. Simulate data for a poisson glm
N = 100
x = rnorm(N, mean=10, sd=1)
mu = exp(1 + 0.2*x)
y = rpois(N, lambda=mu)
plot(x,y)
ds = list(x=x, y=y, N=N)
df = data.frame(x=x,y=y)
model = function() {
for(i in 1:N) {
y[i] ~ dpois(mu[i])
log(mu[i]) <- beta0 + beta1*x[i]
}
combo <- sum(mu[1:5]) / sum(mu[6:7])
beta0 ~ dnorm(0, 0.001)
beta1 ~ dnorm(0, 0.001)
}
params = c('mu', 'combo', 'beta0', 'beta1')
nchains = 2
jags_model = jags(data=ds, param=params, n.thin=1, n.chains=nchains, n.iter=10000, n.burnin=3000, model.file=model)
p_mcmc = as.mcmc(jags_model)
p = data.frame(p_mcmc[[1]])
combo = (p$mu.1. + p$mu.2. + p$mu.3. + p$mu.4. +p$mu.5. ) / (p$mu.6. + p$mu.7.)
print(c(jagsresults(x=jags_model, params=c('combo'))[, '2.5%'],
jagsresults(x=jags_model, params=c('combo'))[, '97.5%']))
print(c(quantile(combo, 0.025),
quantile(combo, 0.975)))
p$mu.1.
combo
hist(combo)
print(c(jagsresults(x=jags_model, params=c('combo'))[, '2.5%'],
jagsresults(x=jags_model, params=c('combo'))[, '97.5%']))
print(c(quantile(combo, 0.025),
quantile(combo, 0.975)))
table(dat.clean$Population<9)
length(dat.clean$State)
1046520/10680
table(dat.clean$Population<9 & dat.clean$Count > 0)
368.62 - 170
2500 - 198.62
40.93+231.54
